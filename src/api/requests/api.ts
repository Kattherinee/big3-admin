/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * BasketBallClubSample
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://dev.trainee.dex-it.ru".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ChangeUserRequest
 */
export interface ChangeUserRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangeUserRequest
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeUserRequest
     */
    avatarUrl?: string;
}
/**
 * 
 * @export
 * @interface ImageSaveImageBody
 */
export interface ImageSaveImageBody {
    /**
     * 
     * @type {Blob}
     * @memberof ImageSaveImageBody
     */
    file?: Blob;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface LoginResult
 */
export interface LoginResult {
    /**
     * 
     * @type {string}
     * @memberof LoginResult
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResult
     */
    avatarUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResult
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface NewPlayerDto
 */
export interface NewPlayerDto {
    /**
     * 
     * @type {string}
     * @memberof NewPlayerDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof NewPlayerDto
     */
    number?: number;
    /**
     * 
     * @type {string}
     * @memberof NewPlayerDto
     */
    position: string;
    /**
     * 
     * @type {number}
     * @memberof NewPlayerDto
     */
    team?: number;
    /**
     * 
     * @type {Date}
     * @memberof NewPlayerDto
     */
    birthday?: Date;
    /**
     * 
     * @type {number}
     * @memberof NewPlayerDto
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof NewPlayerDto
     */
    weight?: number;
    /**
     * 
     * @type {string}
     * @memberof NewPlayerDto
     */
    avatarUrl?: string;
}
/**
 * 
 * @export
 * @interface NewTeamDto
 */
export interface NewTeamDto {
    /**
     * 
     * @type {string}
     * @memberof NewTeamDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof NewTeamDto
     */
    foundationYear?: number;
    /**
     * 
     * @type {string}
     * @memberof NewTeamDto
     */
    division?: string;
    /**
     * 
     * @type {string}
     * @memberof NewTeamDto
     */
    conference?: string;
    /**
     * 
     * @type {string}
     * @memberof NewTeamDto
     */
    imageUrl?: string;
}
/**
 * 
 * @export
 * @interface PlayerDto
 */
export interface PlayerDto {
    /**
     * 
     * @type {string}
     * @memberof PlayerDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    number?: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerDto
     */
    position: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    team?: number;
    /**
     * 
     * @type {Date}
     * @memberof PlayerDto
     */
    birthday?: Date;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    weight?: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerDto
     */
    avatarUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface PlayerDtoPageResult
 */
export interface PlayerDtoPageResult {
    /**
     * 
     * @type {Array<PlayerDto>}
     * @memberof PlayerDtoPageResult
     */
    data?: Array<PlayerDto>;
    /**
     * 
     * @type {number}
     * @memberof PlayerDtoPageResult
     */
    count?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerDtoPageResult
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerDtoPageResult
     */
    size?: number;
}
/**
 * 
 * @export
 * @interface PlayerTeamNameDto
 */
export interface PlayerTeamNameDto {
    /**
     * 
     * @type {string}
     * @memberof PlayerTeamNameDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerTeamNameDto
     */
    number?: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerTeamNameDto
     */
    position: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerTeamNameDto
     */
    team?: number;
    /**
     * 
     * @type {Date}
     * @memberof PlayerTeamNameDto
     */
    birthday?: Date;
    /**
     * 
     * @type {number}
     * @memberof PlayerTeamNameDto
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerTeamNameDto
     */
    weight?: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerTeamNameDto
     */
    avatarUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerTeamNameDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerTeamNameDto
     */
    teamName?: string;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails extends null<String, any> {
    [key: string]: any;

}
/**
 * 
 * @export
 * @interface RegisterUserRequest
 */
export interface RegisterUserRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequest
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequest
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequest
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface TeamDto
 */
export interface TeamDto {
    /**
     * 
     * @type {string}
     * @memberof TeamDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof TeamDto
     */
    foundationYear?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamDto
     */
    division?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamDto
     */
    conference?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamDto
     */
    imageUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamDto
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface TeamDtoPageResult
 */
export interface TeamDtoPageResult {
    /**
     * 
     * @type {Array<TeamDto>}
     * @memberof TeamDtoPageResult
     */
    data?: Array<TeamDto>;
    /**
     * 
     * @type {number}
     * @memberof TeamDtoPageResult
     */
    count?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamDtoPageResult
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamDtoPageResult
     */
    size?: number;
}
/**
 * 
 * @export
 * @interface UnauthorizedResult
 */
export interface UnauthorizedResult {
    /**
     * 
     * @type {number}
     * @memberof UnauthorizedResult
     */
    statusCode?: number;
}
/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangeUserRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthChangePost(body?: ChangeUserRequest, options: any = {}): FetchArgs {
            const localVarPath = `/api/Auth/Change`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangeUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSignInPost(body?: LoginRequest, options: any = {}): FetchArgs {
            const localVarPath = `/api/Auth/SignIn`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterUserRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSignUpPost(body?: RegisterUserRequest, options: any = {}): FetchArgs {
            const localVarPath = `/api/Auth/SignUp`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangeUserRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthChangePost(body?: ChangeUserRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).apiAuthChangePost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {LoginRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSignInPost(body?: LoginRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginResult> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).apiAuthSignInPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {RegisterUserRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSignUpPost(body?: RegisterUserRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginResult> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).apiAuthSignUpPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {ChangeUserRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthChangePost(body?: ChangeUserRequest, options?: any) {
            return AuthApiFp(configuration).apiAuthChangePost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {LoginRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSignInPost(body?: LoginRequest, options?: any) {
            return AuthApiFp(configuration).apiAuthSignInPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {RegisterUserRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSignUpPost(body?: RegisterUserRequest, options?: any) {
            return AuthApiFp(configuration).apiAuthSignUpPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {ChangeUserRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthChangePost(body?: ChangeUserRequest, options?: any) {
        return AuthApiFp(this.configuration).apiAuthChangePost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {LoginRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthSignInPost(body?: LoginRequest, options?: any) {
        return AuthApiFp(this.configuration).apiAuthSignInPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {RegisterUserRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthSignUpPost(body?: RegisterUserRequest, options?: any) {
        return AuthApiFp(this.configuration).apiAuthSignUpPost(body, options)(this.fetch, this.basePath);
    }

}
/**
 * EchoApi - fetch parameter creator
 * @export
 */
export const EchoApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEchoPingGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/Echo/Ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEchoVersionGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/Echo/Version`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EchoApi - functional programming interface
 * @export
 */
export const EchoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEchoPingGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EchoApiFetchParamCreator(configuration).apiEchoPingGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEchoVersionGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EchoApiFetchParamCreator(configuration).apiEchoVersionGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EchoApi - factory interface
 * @export
 */
export const EchoApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEchoPingGet(options?: any) {
            return EchoApiFp(configuration).apiEchoPingGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEchoVersionGet(options?: any) {
            return EchoApiFp(configuration).apiEchoVersionGet(options)(fetch, basePath);
        },
    };
};

/**
 * EchoApi - object-oriented interface
 * @export
 * @class EchoApi
 * @extends {BaseAPI}
 */
export class EchoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoApi
     */
    public apiEchoPingGet(options?: any) {
        return EchoApiFp(this.configuration).apiEchoPingGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoApi
     */
    public apiEchoVersionGet(options?: any) {
        return EchoApiFp(this.configuration).apiEchoVersionGet(options)(this.fetch, this.basePath);
    }

}
/**
 * ImageApi - fetch parameter creator
 * @export
 */
export const ImageApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageDeleteImageDelete(fileName?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/Image/DeleteImage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageSaveImagePost(file?: Blob, options: any = {}): FetchArgs {
            const localVarPath = `/api/Image/SaveImage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication bearer required

            if (file !== undefined) {
                localVarFormParams.set('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageDeleteImageDelete(fileName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).apiImageDeleteImageDelete(fileName, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageSaveImagePost(file?: Blob, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).apiImageSaveImagePost(file, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageDeleteImageDelete(fileName?: string, options?: any) {
            return ImageApiFp(configuration).apiImageDeleteImageDelete(fileName, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageSaveImagePost(file?: Blob, options?: any) {
            return ImageApiFp(configuration).apiImageSaveImagePost(file, options)(fetch, basePath);
        },
    };
};

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageDeleteImageDelete(fileName?: string, options?: any) {
        return ImageApiFp(this.configuration).apiImageDeleteImageDelete(fileName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageSaveImagePost(file?: Blob, options?: any) {
        return ImageApiFp(this.configuration).apiImageSaveImagePost(file, options)(this.fetch, this.basePath);
    }

}
/**
 * PlayerApi - fetch parameter creator
 * @export
 */
export const PlayerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewPlayerDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerAddPost(body?: NewPlayerDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/Player/Add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NewPlayerDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerDeleteDelete(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/Player/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerGetGet(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/Player/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {Array<number>} [teamIds] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerGetPlayersGet(name?: string, teamIds?: Array<number>, page?: number, pageSize?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/Player/GetPlayers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (teamIds) {
                localVarQueryParameter['TeamIds'] = teamIds;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerGetPositionsGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/Player/GetPositions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PlayerDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerUpdatePut(body?: PlayerDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/Player/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PlayerDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayerApi - functional programming interface
 * @export
 */
export const PlayerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewPlayerDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerAddPost(body?: NewPlayerDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlayerDto> {
            const localVarFetchArgs = PlayerApiFetchParamCreator(configuration).apiPlayerAddPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerDeleteDelete(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlayerDto> {
            const localVarFetchArgs = PlayerApiFetchParamCreator(configuration).apiPlayerDeleteDelete(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerGetGet(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlayerTeamNameDto> {
            const localVarFetchArgs = PlayerApiFetchParamCreator(configuration).apiPlayerGetGet(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {Array<number>} [teamIds] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerGetPlayersGet(name?: string, teamIds?: Array<number>, page?: number, pageSize?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlayerDtoPageResult> {
            const localVarFetchArgs = PlayerApiFetchParamCreator(configuration).apiPlayerGetPlayersGet(name, teamIds, page, pageSize, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerGetPositionsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PlayerApiFetchParamCreator(configuration).apiPlayerGetPositionsGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {PlayerDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerUpdatePut(body?: PlayerDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlayerDto> {
            const localVarFetchArgs = PlayerApiFetchParamCreator(configuration).apiPlayerUpdatePut(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PlayerApi - factory interface
 * @export
 */
export const PlayerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {NewPlayerDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerAddPost(body?: NewPlayerDto, options?: any) {
            return PlayerApiFp(configuration).apiPlayerAddPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerDeleteDelete(id?: number, options?: any) {
            return PlayerApiFp(configuration).apiPlayerDeleteDelete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerGetGet(id?: number, options?: any) {
            return PlayerApiFp(configuration).apiPlayerGetGet(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {Array<number>} [teamIds] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerGetPlayersGet(name?: string, teamIds?: Array<number>, page?: number, pageSize?: number, options?: any) {
            return PlayerApiFp(configuration).apiPlayerGetPlayersGet(name, teamIds, page, pageSize, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerGetPositionsGet(options?: any) {
            return PlayerApiFp(configuration).apiPlayerGetPositionsGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {PlayerDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayerUpdatePut(body?: PlayerDto, options?: any) {
            return PlayerApiFp(configuration).apiPlayerUpdatePut(body, options)(fetch, basePath);
        },
    };
};

/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
export class PlayerApi extends BaseAPI {
    /**
     * 
     * @param {NewPlayerDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public apiPlayerAddPost(body?: NewPlayerDto, options?: any) {
        return PlayerApiFp(this.configuration).apiPlayerAddPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public apiPlayerDeleteDelete(id?: number, options?: any) {
        return PlayerApiFp(this.configuration).apiPlayerDeleteDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public apiPlayerGetGet(id?: number, options?: any) {
        return PlayerApiFp(this.configuration).apiPlayerGetGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [name] 
     * @param {Array<number>} [teamIds] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public apiPlayerGetPlayersGet(name?: string, teamIds?: Array<number>, page?: number, pageSize?: number, options?: any) {
        return PlayerApiFp(this.configuration).apiPlayerGetPlayersGet(name, teamIds, page, pageSize, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public apiPlayerGetPositionsGet(options?: any) {
        return PlayerApiFp(this.configuration).apiPlayerGetPositionsGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {PlayerDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public apiPlayerUpdatePut(body?: PlayerDto, options?: any) {
        return PlayerApiFp(this.configuration).apiPlayerUpdatePut(body, options)(this.fetch, this.basePath);
    }

}
/**
 * TeamApi - fetch parameter creator
 * @export
 */
export const TeamApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewTeamDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamAddPost(body?: NewTeamDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/Team/Add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NewTeamDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamDeleteDelete(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/Team/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamGetGet(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/Team/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamGetTeamsGet(name?: string, page?: number, pageSize?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/Team/GetTeams`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TeamDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamUpdatePut(body?: TeamDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/Team/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TeamDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewTeamDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamAddPost(body?: NewTeamDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeamDto> {
            const localVarFetchArgs = TeamApiFetchParamCreator(configuration).apiTeamAddPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamDeleteDelete(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeamDto> {
            const localVarFetchArgs = TeamApiFetchParamCreator(configuration).apiTeamDeleteDelete(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamGetGet(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeamDto> {
            const localVarFetchArgs = TeamApiFetchParamCreator(configuration).apiTeamGetGet(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamGetTeamsGet(name?: string, page?: number, pageSize?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeamDtoPageResult> {
            const localVarFetchArgs = TeamApiFetchParamCreator(configuration).apiTeamGetTeamsGet(name, page, pageSize, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {TeamDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamUpdatePut(body?: TeamDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeamDto> {
            const localVarFetchArgs = TeamApiFetchParamCreator(configuration).apiTeamUpdatePut(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {NewTeamDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamAddPost(body?: NewTeamDto, options?: any) {
            return TeamApiFp(configuration).apiTeamAddPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamDeleteDelete(id?: number, options?: any) {
            return TeamApiFp(configuration).apiTeamDeleteDelete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamGetGet(id?: number, options?: any) {
            return TeamApiFp(configuration).apiTeamGetGet(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamGetTeamsGet(name?: string, page?: number, pageSize?: number, options?: any) {
            return TeamApiFp(configuration).apiTeamGetTeamsGet(name, page, pageSize, options)(fetch, basePath);
        },
        /**
         * 
         * @param {TeamDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamUpdatePut(body?: TeamDto, options?: any) {
            return TeamApiFp(configuration).apiTeamUpdatePut(body, options)(fetch, basePath);
        },
    };
};

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
    /**
     * 
     * @param {NewTeamDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamAddPost(body?: NewTeamDto, options?: any) {
        return TeamApiFp(this.configuration).apiTeamAddPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamDeleteDelete(id?: number, options?: any) {
        return TeamApiFp(this.configuration).apiTeamDeleteDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamGetGet(id?: number, options?: any) {
        return TeamApiFp(this.configuration).apiTeamGetGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [name] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamGetTeamsGet(name?: string, page?: number, pageSize?: number, options?: any) {
        return TeamApiFp(this.configuration).apiTeamGetTeamsGet(name, page, pageSize, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {TeamDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamUpdatePut(body?: TeamDto, options?: any) {
        return TeamApiFp(this.configuration).apiTeamUpdatePut(body, options)(this.fetch, this.basePath);
    }

}
